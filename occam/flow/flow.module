#INCLUDE "plumbing.module"

VAL INT READ.DELAY IS 10:

PROC MiddlePass (VAL INT low, high, CHAN INT in?, out!)
  INT v:
  WHILE TRUE
    SEQ
      in ? v
      IF 
        (v >= low) AND (v <= high)
          out ! v
        TRUE
          SKIP
:

PROC Copy (CHAN INT a?, o1!, o2!)
  INT v:
  WHILE TRUE
    SEQ
      a ? v
      PAR
        o1 ! v
        o2 ! v
:

-- Do it fairly.
PROC Merge (CHAN INT a?, b?, o!)
  INT v:
  INITIAL INT c IS 0:
  WHILE TRUE
    SEQ
      ALT
        (c = 0) & a ? v
          SKIP
        (c = 1) & b ? v
          SKIP
      c := (c + 1) REM 2
      o ! v
:

PROC Hole (CHAN INT a?)
  INT v:
  WHILE TRUE
    a ? v
:


PROC Gate (CHAN INT a?, b?, o!)
  INT va, vb:
  WHILE TRUE
    SEQ
      PAR
        a ? va
        b ? vb
      IF 
        (va >= 1) AND (vb >= 1)
          o ! va
        TRUE
          o ! 0
:

PROC Toggle (VAL INT pin, CHAN INT out!)
  INITIAL INT vout IS 0:
  LEVEL pin.state:
  INITIAL LEVEL prev IS LOW:
  SEQ
    digital.mode (pin, INPUT)
    WHILE TRUE
      SEQ
        digital.read (pin, pin.state)
        IF
          (BOOL pin.state) AND (BOOL prev)
            SKIP
          (BOOL pin.state) OR (BOOL prev)
            vout := (vout + 1) REM 2
          TRUE
            SKIP
        -- serial.write.int (TX0, vout)
        -- serial.write.newline (TX0)
        out ! (vout * 100)
:

PROC ReadSensor (VAL INT pin, CHAN INT out!)
  INITIAL INT avr.pin IS board.analog.to.chip(pin):
  WHILE TRUE
    INT reading:
    SEQ
      delay(READ.DELAY)
      adc.base(avr.pin, VCC, reading)
      out ! (reading / 11)
:

PROC TurnOnInRange (VAL INT pin, min, max, CHAN INT in?)
  WHILE TRUE
    INT value:
    SEQ
      digital.mode (pin, OUTPUT)
      in ? value
      IF
        (value >= min) AND (value <= max)
          digital.write(pin, HIGH)
        TRUE
          digital.write(pin, LOW)
:

PROC TurnOn (VAL INT pin, CHAN INT in?)
  SEQ
    digital.mode (pin, OUTPUT)
    WHILE TRUE
      INT value:
      SEQ
        in ? value
        IF
          (value >= 1) 
            digital.write(pin, HIGH)
          TRUE
            digital.write(pin, LOW)
:

PROC Fade (VAL INT pin, CHAN INT in?)
  CHAN BYTE lvl:
  SEQ
    digital.mode (pin, OUTPUT)
    PAR
      pwm (pin, lvl?)
      INITIAL INT prev IS 0:
      INT value:
      WHILE TRUE
        SEQ
          in ? value
          IF 
            value <> prev
              SEQ
                prev := value
                -- serial.write.int (TX0, ((value * 25) / 10))
                -- serial.write.newline (TX0)
            TRUE
              SKIP
          lvl ! (BYTE ((value * 25) / 10))
:

PROC SetServo (VAL INT pin, CHAN INT in?)
  CHAN BYTE p:
  PAR
    simple.servo (pin , p?)
    INT v:
    WHILE TRUE
      SEQ
        in ? v
        p ! (BYTE ((v * 36) / 21))
:

